test -e "$REPO_PIGLIT/piglit" || return 1

function __igt_resume__ {
    cd "$REPO_PIGLIT"

    # verify that the run is indeed resumable
    local piglit_output="${run_log_file}_tmp"
    [ -d "$piglit_output" ] || return 19

    # Only try to resume if it is still possible to resume, otherwise, just
    # generate the report
    if [ -f "$piglit_output/metadata.json" ]; then
        # ignore the incomplete result to avoid being stuck in a loop
        local cmdline="sudo IGT_TEST_ROOT="$IGT_ROOT/tests" $REPO_PIGLIT/piglit resume -n ${run_log_file}_tmp"

        ENV_DUMP_RESTRICT_TO_BINARY="NO_ENVDUMP_PLEASE" \
        $cmdline >> "$run_log_file.stdout" 2>> "$run_log_file.stderr"
        local exit_code=$?

        # piglit resume returns 1 if we try to resume a report that is already done
        if [ $exit_code -ne 0 ]; then
            __igt_resume__
        fi
    fi

    # Make sure that the output folder is not root-owned
    sudo chown -R "$(id -un):$(id -gn)" "$piglit_output"
    __piglit_gen_report__

    return 0
}

function __igt_run__ {
    cd "$REPO_PIGLIT"

    local test_name=${testNames[$t]}
    local parameters="$@"

    # Sub tests
    local has_subtests=0
    local testlist=''
    testlistfile="${run_log_file}.testlist"
    rm "$testlistfile"
    for subtest in "${run_sub_tests[@]}"; do
        echo "$subtest" | cut -d '<' -f 1 >> $testlistfile
        has_subtests=1
    done
    [ $has_subtests -eq 1 ] && testlist="--test-list $testlistfile"

    local piglit_output="${run_log_file}_tmp"

    # start piglit
    local cmdline="sudo IGT_TEST_ROOT="$IGT_ROOT/tests" $REPO_PIGLIT/piglit run $PIGLIT_RUN_PARAMS -s $parameters $testlist tests/igt.py ${piglit_output}"

    ENV_DUMP_REQUIRE_ARGUMENT="$REPO_PIGLIT/piglit" \
    ENV_DUMP_NO_METRICS=1 \
    run_bench 0 $cmdline > /dev/null 2> /dev/null
    local exit_code=$?

    if [ $exit_code -ne 0 ]; then
        __igt_resume__
    else
        sudo chown -R "$(id -un):$(id -gn)" "$piglit_output"
        __piglit_gen_report__
    fi
}

while read name parameters; do
	name="piglit:igt:$name"
	eval "${name}_run() { __igt_run__ "$parameters" \$@; }"
	test_name="$test_name $name"
done <<< "all  ''
	basic '-t basic'
	core '-t core'
	debugfs '-t debugfs'
	drm '-t drm'
	drv '-t drv'
	gem '-t gem'
	kms '-t kms'
	prime '-t prime'
	pm '-t pm -t kms_psr_sink_crc -t kms_fbc_crc -t kms_frontbuffer_tracking -t kms_drrs -t kms_flip'
	sysfs '-t sysfs'
	cursor '-t cursor'
	flip '-t flip'
	hang '-t hang'
	color '-t kms_pipe_color'
	gen3 '-t gen3'
	gen7 '-t gen7'
	fbc '-t kms_fbc_crc -t kms_frontbuffer_tracking@fbc-'
	psr '-t psr'
	lpsp '-t lpsp'
	rpm '-t rpm'
	sseu '-t sseu'
	rps '-t rps'
	dpms '-t dpms -t kms_flip'
	blc '-t pm_backlight'"

for f in "$IGT_ROOT/tests/"**/*.testlist; do
	[ -e "$f" ] || continue
	_bn=$(basename $f)
	_dn=$(basename $(dirname $f))
	name="piglit:igt:${_dn}%${_bn%.testlist}"
	eval "${name}_run() { __igt_run__ "" --test-list "$f" \$@; }"
	eval "${name}_resume() { __igt_resume__; }"
	test_name="$test_name $name"
done

test_unit="pass/total"
test_type="unit"
test_exec_time=600
test_has_exit_code=1

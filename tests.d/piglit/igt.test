test -e "$REPO_PIGLIT/piglit" || return 1

function __igt_run__ {
    cd "$REPO_PIGLIT"

    local test_name=${testNames[$t]}
    local parameters="$@"

    # Sub tests
    local has_subtests=0
    local testlist=''
    testlistfile="${run_log_file}.testlist"
    rm "$testlistfile"
    for subtest in "${run_sub_tests[@]}"; do
        echo "$subtest" | cut -d '<' -f 1 >> $testlistfile
        has_subtests=1
    done
    [ $has_subtests -eq 1 ] && testlist="--test-list $testlistfile"

    piglit_output=${run_log_file}_tmp

    # start piglit
    local cmdline="sudo IGT_TEST_ROOT="$IGT_ROOT/tests" ./piglit run $PIGLIT_RUN_PARAMS $parameters $testlist tests/igt.py ${piglit_output}"

    ENV_DUMP_RESTRICT_TO_BINARY=/usr/bin/glxinfo \
    run_bench 0 $cmdline > /dev/null 2> /dev/null
    local exit_code=$?

    # generate a report, first print the passrate on the first line, then print the individual results
    python3 - << END
import sys
import six

sys.path.append("$PIGLIT_RUN_PARAMS")
from framework import summary, status, core, backends, exceptions
from framework.programs import parsers

testrun = backends.load("${piglit_output}")

tests=list()
pass_count = 0
for name, result in six.iteritems(testrun.tests):
    for key, value in six.iteritems(result.subtests):
        tests.append("{}<{}>: {}".format(name, key, value))
        if value == 'pass':
            pass_count += 1
    tests.append("{}: {}".format(name, result.result))
    if result.result == 'pass':
        pass_count += 1

print("{:.3f}".format(pass_count / len(tests)))
for test in tests:
    print(test)
END

    # Go through all the subtests we wanted to get and check if all of them
    # are present. If not, mark them as missing.
    for subtest in "${run_sub_tests[@]}"; do
        grep "$subtest" "$run_log_file" 2> /dev/null > /dev/null
        [ $? -eq 1 ] && echo "$subtest: missing"
    done

    # Display the final status, if it was a full run
    if [ -z "${testSubTests[$t]}" ]; then
        if [ "$exit_code" -eq 0 ]; then
            echo ": completed"
        else
            echo ": incomplete"
        fi
    fi

    # delete the temporary report
    sudo rm -rf ${piglit_output} 2>&1
}

while read name parameters; do
	name="piglit:igt:$name"
	eval "${name}_run() { __igt_run__ "$parameters" \$@; }"
	test_name="$test_name $name"
done <<< "all  ''
	basic '-t basic'
	core '-t core'
	debugfs '-t debugfs'
	drm '-t drm'
	drv '-t drv'
	gem '-t gem'
	kms '-t kms'
	prime '-t prime'
	pm '-t pm -t kms_psr_sink_crc -t kms_fbc_crc -t kms_frontbuffer_tracking -t kms_drrs -t kms_flip'
	sysfs '-t sysfs'
	cursor '-t cursor'
	flip '-t flip'
	hang '-t hang'
	color '-t kms_pipe_color'
	gen3 '-t gen3'
	gen7 '-t gen7'
	fbc '-t kms_fbc_crc -t kms_frontbuffer_tracking@fbc-'
	psr '-t psr'
	lpsp '-t lpsp'
	rpm '-t rpm'
	sseu '-t sseu'
	rps '-t rps'
	dpms '-t dpms -t kms_flip'
	blc '-t pm_backlight'"

for f in "$IGT_ROOT/tests/"**/*.testlist; do
	[ -e "$f" ] || continue
	_bn=$(basename $f)
	_dn=$(basename $(dirname $f))
	name="piglit:igt:${_dn}%${_bn%.testlist}"
	eval "${name}_run() { __igt_run__ --test-list "$f" \$@; }"
	test_name="$test_name $name"
done

test_unit="pass/total"
test_type="unit"
test_exec_time=600
